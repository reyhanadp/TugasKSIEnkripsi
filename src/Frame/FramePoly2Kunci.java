/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frame;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author reyhanadp
 */
public class FramePoly2Kunci extends javax.swing.JFrame {
    
    Vector tabel_model = new Vector();
    
    /**
     * Creates new form FramePoly2Kunci
     */
    public FramePoly2Kunci() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        tabel_model.add("a");
        tabel_model.add("b");
        tabel_model.add("c");
        tabel_model.add("d");
        tabel_model.add("e");
        tabel_model.add("f");
        tabel_model.add("g");
        tabel_model.add("h");
        tabel_model.add("i");
        tabel_model.add("j");
        tabel_model.add("k");
        tabel_model.add("l");
        tabel_model.add("m");
        tabel_model.add("n");
        tabel_model.add("o");
        tabel_model.add("p");
        tabel_model.add("q");
        tabel_model.add("r");
        tabel_model.add("s");
        tabel_model.add("t");
        tabel_model.add("u");
        tabel_model.add("v");
        tabel_model.add("w");
        tabel_model.add("x");
        tabel_model.add("y");
        tabel_model.add("z");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fieldPlaintext = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fieldKunci = new javax.swing.JTextField();
        btnProses = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fieldChipertext = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        fieldKunci2 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        fieldChipertextDekripsi = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        fieldKunciDekripsi = new javax.swing.JTextField();
        btnProses2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        fieldPlaintextDekripsi = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        fieldKunci2Dekripsi = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Enkripsi"));

        jLabel1.setText("Plaintext");

        jLabel2.setText("Kunci 1");

        fieldKunci.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldKunciKeyTyped(evt);
            }
        });

        btnProses.setText("Proses");
        btnProses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProsesActionPerformed(evt);
            }
        });

        jLabel3.setText("Chipertext");

        fieldChipertext.setColumns(20);
        fieldChipertext.setRows(5);
        jScrollPane1.setViewportView(fieldChipertext);

        jButton1.setText("Copy to Clipboard");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Kunci 2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldKunci, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fieldKunci2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnProses, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addComponent(fieldPlaintext)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fieldPlaintext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fieldKunci, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fieldKunci2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnProses)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Dekripsi"));

        jLabel9.setText("Chipertext");

        jLabel10.setText("Kunci 1");

        fieldKunciDekripsi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldKunciDekripsiKeyTyped(evt);
            }
        });

        btnProses2.setText("Proses");
        btnProses2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProses2ActionPerformed(evt);
            }
        });

        jLabel11.setText("PlainText");

        fieldPlaintextDekripsi.setColumns(20);
        fieldPlaintextDekripsi.setRows(5);
        jScrollPane3.setViewportView(fieldPlaintextDekripsi);

        jButton3.setText("Copy to Clipboard");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel12.setText("Kunci 2");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldKunciDekripsi, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fieldKunci2Dekripsi, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnProses2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addComponent(fieldChipertextDekripsi)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(fieldChipertextDekripsi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(fieldKunciDekripsi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(fieldKunci2Dekripsi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnProses2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fieldKunciKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldKunciKeyTyped
        // TODO add your handling code here:
        //        char karakter = evt.getKeyChar();
        //
        //        if (karakter == KeyEvent.VK_MULTIPLY) {
            //            JOptionPane.showMessageDialog(null, "Hanya Boleh Huruf!");
            //            evt.consume();
            //        }
    }//GEN-LAST:event_fieldKunciKeyTyped

    private void btnProsesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProsesActionPerformed
        // TODO add your handling code here:
        Vector kunci_vector = new Vector();
        Vector kunci_vector2 = new Vector();
        
        String kunci = fieldKunci.getText();
        String kunci2 = fieldKunci2.getText();
        
        String[] kunci_array = kunci.toLowerCase().split("");
        String kunci_hasil = "";
        String[] kunci_array2 = kunci2.toLowerCase().split("");
        String kunci_hasil2 = "";
        int index = 0;

        for (int i = 0; i < kunci_array.length; i++) {
            index=0;
            if (i == 0) {
                kunci_hasil = kunci_hasil + kunci_array[0];
                kunci_vector.add(kunci_array[i]);
            } else {
                for (int j = i-1; 0 <= j; j--) {
                    if (kunci_array[i].compareTo(kunci_array[j]) == 0) {
                        index=1;
                        break;
                    }
                }

                if(index == 0 && kunci_array[i].compareTo(" ") != 0){
                    kunci_hasil = kunci_hasil + kunci_array[i];
                    kunci_vector.add(kunci_array[i]);
                }

            }

        }
        
        for (int i = 0; i < kunci_array2.length; i++) {
            index=0;
            if (i == 0) {
                kunci_hasil2 = kunci_hasil2 + kunci_array2[0];
                kunci_vector2.add(kunci_array2[i]);
            } else {
                for (int j = i-1; 0 <= j; j--) {
                    if (kunci_array2[i].compareTo(kunci_array2[j]) == 0) {
                        index=1;
                        break;
                    }
                }

                if(index == 0 && kunci_array2[i].compareTo(" ") != 0){
                    kunci_hasil2 = kunci_hasil2 + kunci_array2[i];
                    kunci_vector2.add(kunci_array2[i]);
                }
            }
        }


        String[] kunci_hasil_array = kunci_hasil.toLowerCase().split("");
        for(int i = 0; i < 26 ; i++){
            index = 0;
            for(int j = 0 ; j < kunci_hasil_array.length ; j++){
                if(tabel_model.get(i).equals(kunci_hasil_array[j])){
                    index = 1;
                    break;
                }
            }

            if(index == 0){
                kunci_vector.add(tabel_model.get(i));
            }
        }
        
        String[] kunci_hasil_array2 = kunci_hasil2.toLowerCase().split("");
        for(int i = 0; i < 26 ; i++){
            index = 0;
            for(int j = 0 ; j < kunci_hasil_array2.length ; j++){
                if(tabel_model.get(i).equals(kunci_hasil_array2[j])){
                    index = 1;
                    break;
                }
            }

            if(index == 0){
                kunci_vector2.add(tabel_model.get(i));
            }
        }
        String kunci_str = "";
        for(int i=0 ; i < kunci_vector2.size() ; i++){
            kunci_str = kunci_str + kunci_vector2.get(i);
        }
        System.out.println(kunci_str);
//
//
        String plaintext = fieldPlaintext.getText();
        String[] temp = plaintext.toLowerCase().split("");
        String chipertext = "";
        index = 0;
        for(int i = 0; i < temp.length ; i++){
            if(temp[i].compareTo(" ") == 0){
                chipertext = chipertext + " ";
            }else{
                if ("a".equals(temp[i])) {
                    index = 0;
                } else if ("b".equals(temp[i])) {
                    index = 1;
                } else if ("c".equals(temp[i])) {
                    index = 2;
                } else if ("d".equals(temp[i])) {
                    index = 3;
                } else if ("e".equals(temp[i])) {
                    index = 4;
                } else if ("f".equals(temp[i])) {
                    index = 5;
                } else if ("g".equals(temp[i])) {
                    index = 6;
                } else if ("h".equals(temp[i])) {
                    index = 7;
                } else if ("i".equals(temp[i])) {
                    index = 8;
                } else if ("j".equals(temp[i])) {
                    index = 9;
                } else if ("k".equals(temp[i])) {
                    index = 10;
                } else if ("l".equals(temp[i])) {
                    index = 11;
                } else if ("m".equals(temp[i])) {
                    index = 12;
                } else if ("n".equals(temp[i])) {
                    index = 13;
                } else if ("o".equals(temp[i])) {
                    index = 14;
                } else if ("p".equals(temp[i])) {
                    index = 15;
                } else if ("q".equals(temp[i])) {
                    index = 16;
                } else if ("r".equals(temp[i])) {
                    index = 17;
                } else if ("s".equals(temp[i])) {
                    index = 18;
                } else if ("t".equals(temp[i])) {
                    index = 19;
                } else if ("u".equals(temp[i])) {
                    index = 20;
                } else if ("v".equals(temp[i])) {
                    index = 21;
                } else if ("w".equals(temp[i])) {
                    index = 22;
                } else if ("x".equals(temp[i])) {
                    index = 23;
                } else if ("y".equals(temp[i])) {
                    index = 24;
                } else if ("z".equals(temp[i])) {
                    index = 25;
                }

                chipertext = chipertext + kunci_vector.get(index);
            }
        }
        
        String[] temp2 = chipertext.toLowerCase().split("");
        String chipertext2 = "";
        index = 0;
        for(int i = 0; i < temp2.length ; i++){
            if(temp2[i].compareTo(" ") == 0){
                chipertext2 = chipertext2 + " ";
            }else{
                if ("a".equals(temp2[i])) {
                    index = 0;
                } else if ("b".equals(temp2[i])) {
                    index = 1;
                } else if ("c".equals(temp2[i])) {
                    index = 2;
                } else if ("d".equals(temp2[i])) {
                    index = 3;
                } else if ("e".equals(temp2[i])) {
                    index = 4;
                } else if ("f".equals(temp2[i])) {
                    index = 5;
                } else if ("g".equals(temp2[i])) {
                    index = 6;
                } else if ("h".equals(temp2[i])) {
                    index = 7;
                } else if ("i".equals(temp2[i])) {
                    index = 8;
                } else if ("j".equals(temp2[i])) {
                    index = 9;
                } else if ("k".equals(temp2[i])) {
                    index = 10;
                } else if ("l".equals(temp2[i])) {
                    index = 11;
                } else if ("m".equals(temp2[i])) {
                    index = 12;
                } else if ("n".equals(temp2[i])) {
                    index = 13;
                } else if ("o".equals(temp2[i])) {
                    index = 14;
                } else if ("p".equals(temp2[i])) {
                    index = 15;
                } else if ("q".equals(temp2[i])) {
                    index = 16;
                } else if ("r".equals(temp2[i])) {
                    index = 17;
                } else if ("s".equals(temp2[i])) {
                    index = 18;
                } else if ("t".equals(temp2[i])) {
                    index = 19;
                } else if ("u".equals(temp2[i])) {
                    index = 20;
                } else if ("v".equals(temp2[i])) {
                    index = 21;
                } else if ("w".equals(temp2[i])) {
                    index = 22;
                } else if ("x".equals(temp2[i])) {
                    index = 23;
                } else if ("y".equals(temp2[i])) {
                    index = 24;
                } else if ("z".equals(temp2[i])) {
                    index = 25;
                }

                chipertext2 = chipertext2 + kunci_vector2.get(index);
            }
        }
        
        
        fieldChipertext.setText(chipertext2.toUpperCase());
        fieldChipertextDekripsi.setText(chipertext2.toUpperCase());
        fieldKunciDekripsi.setText(kunci);
        fieldKunci2Dekripsi.setText(kunci2);
    }//GEN-LAST:event_btnProsesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String chiper = fieldChipertext.getText();
        StringSelection stringSelection = new StringSelection(chiper);
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(stringSelection, null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fieldKunciDekripsiKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldKunciDekripsiKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldKunciDekripsiKeyTyped

    private void btnProses2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProses2ActionPerformed
        // TODO add your handling code here:
        Vector kunci_vector = new Vector();
        Vector kunci_vector2 = new Vector();
        
        String kunci = fieldKunciDekripsi.getText();
        String kunci2 = fieldKunci2Dekripsi.getText();
        
        String[] kunci_array = kunci.toLowerCase().split("");
        String kunci_hasil = "";
        String[] kunci_array2 = kunci2.toLowerCase().split("");
        String kunci_hasil2 = "";
        int index = 0;

        for (int i = 0; i < kunci_array.length; i++) {
            index=0;
            if (i == 0) {
                kunci_hasil = kunci_hasil + kunci_array[0];
                kunci_vector.add(kunci_array[i]);
            } else {
                for (int j = i-1; 0 <= j; j--) {
                    if (kunci_array[i].compareTo(kunci_array[j]) == 0) {
                        index=1;
                        break;
                    }
                }

                if(index == 0 && kunci_array[i].compareTo(" ") != 0){
                    kunci_hasil = kunci_hasil + kunci_array[i];
                    kunci_vector.add(kunci_array[i]);
                }

            }

        }
        
        for (int i = 0; i < kunci_array2.length; i++) {
            index=0;
            if (i == 0) {
                kunci_hasil2 = kunci_hasil2 + kunci_array2[0];
                kunci_vector2.add(kunci_array2[i]);
            } else {
                for (int j = i-1; 0 <= j; j--) {
                    if (kunci_array2[i].compareTo(kunci_array2[j]) == 0) {
                        index=1;
                        break;
                    }
                }

                if(index == 0 && kunci_array2[i].compareTo(" ") != 0){
                    kunci_hasil2 = kunci_hasil2 + kunci_array2[i];
                    kunci_vector2.add(kunci_array2[i]);
                }
            }
        }


        String[] kunci_hasil_array = kunci_hasil.toLowerCase().split("");
        for(int i = 0; i < 26 ; i++){
            index = 0;
            for(int j = 0 ; j < kunci_hasil_array.length ; j++){
                if(tabel_model.get(i).equals(kunci_hasil_array[j])){
                    index = 1;
                    break;
                }
            }

            if(index == 0){
                kunci_vector.add(tabel_model.get(i));
            }
        }
        
        String[] kunci_hasil_array2 = kunci_hasil2.toLowerCase().split("");
        for(int i = 0; i < 26 ; i++){
            index = 0;
            for(int j = 0 ; j < kunci_hasil_array2.length ; j++){
                if(tabel_model.get(i).equals(kunci_hasil_array2[j])){
                    index = 1;
                    break;
                }
            }

            if(index == 0){
                kunci_vector2.add(tabel_model.get(i));
            }
        }
        
        String chipertext = fieldChipertextDekripsi.getText();
        String[] temp2 = chipertext.toLowerCase().split("");
        String plaintext = "";
        index = 0;
        for(int i = 0; i < temp2.length ; i++){
            if(temp2[i].compareTo(" ") == 0){
                plaintext = plaintext + " ";
            }else{
                if (kunci_vector2.get(0).equals(temp2[i])) {
                    index = 0;
                } else if (kunci_vector2.get(1).equals(temp2[i])) {
                    index = 1;
                } else if (kunci_vector2.get(2).equals(temp2[i])) {
                    index = 2;
                } else if (kunci_vector2.get(3).equals(temp2[i])) {
                    index = 3;
                } else if (kunci_vector2.get(4).equals(temp2[i])) {
                    index = 4;
                } else if (kunci_vector2.get(5).equals(temp2[i])) {
                    index = 5;
                } else if (kunci_vector2.get(6).equals(temp2[i])) {
                    index = 6;
                } else if (kunci_vector2.get(7).equals(temp2[i])) {
                    index = 7;
                } else if (kunci_vector2.get(8).equals(temp2[i])) {
                    index = 8;
                } else if (kunci_vector2.get(9).equals(temp2[i])) {
                    index = 9;
                } else if (kunci_vector2.get(10).equals(temp2[i])) {
                    index = 10;
                } else if (kunci_vector2.get(11).equals(temp2[i])) {
                    index = 11;
                } else if (kunci_vector2.get(12).equals(temp2[i])) {
                    index = 12;
                } else if (kunci_vector2.get(13).equals(temp2[i])) {
                    index = 13;
                } else if (kunci_vector2.get(14).equals(temp2[i])) {
                    index = 14;
                } else if (kunci_vector2.get(15).equals(temp2[i])) {
                    index = 15;
                } else if (kunci_vector2.get(16).equals(temp2[i])) {
                    index = 16;
                } else if (kunci_vector2.get(17).equals(temp2[i])) {
                    index = 17;
                } else if (kunci_vector2.get(18).equals(temp2[i])) {
                    index = 18;
                } else if (kunci_vector2.get(19).equals(temp2[i])) {
                    index = 19;
                } else if (kunci_vector2.get(20).equals(temp2[i])) {
                    index = 20;
                } else if (kunci_vector2.get(21).equals(temp2[i])) {
                    index = 21;
                } else if (kunci_vector2.get(22).equals(temp2[i])) {
                    index = 22;
                } else if (kunci_vector2.get(23).equals(temp2[i])) {
                    index = 23;
                } else if (kunci_vector2.get(24).equals(temp2[i])) {
                    index = 24;
                } else if (kunci_vector2.get(25).equals(temp2[i])) {
                    index = 25;
                }

                plaintext = plaintext + tabel_model.get(index);
            }
        }
        
        
        String[] temp = plaintext.toLowerCase().split("");
        String plaintext2 = "";
        index = 0;
        for(int i = 0; i < temp.length ; i++){
            if(temp[i].compareTo(" ") == 0){
                plaintext2 = plaintext2 + " ";
            }else{
                if (kunci_vector.get(0).equals(temp[i])) {
                    index = 0;
                } else if (kunci_vector.get(1).equals(temp[i])) {
                    index = 1;
                } else if (kunci_vector.get(2).equals(temp[i])) {
                    index = 2;
                } else if (kunci_vector.get(3).equals(temp[i])) {
                    index = 3;
                } else if (kunci_vector.get(4).equals(temp[i])) {
                    index = 4;
                } else if (kunci_vector.get(5).equals(temp[i])) {
                    index = 5;
                } else if (kunci_vector.get(6).equals(temp[i])) {
                    index = 6;
                } else if (kunci_vector.get(7).equals(temp[i])) {
                    index = 7;
                } else if (kunci_vector.get(8).equals(temp[i])) {
                    index = 8;
                } else if (kunci_vector.get(9).equals(temp[i])) {
                    index = 9;
                } else if (kunci_vector.get(10).equals(temp[i])) {
                    index = 10;
                } else if (kunci_vector.get(11).equals(temp[i])) {
                    index = 11;
                } else if (kunci_vector.get(12).equals(temp[i])) {
                    index = 12;
                } else if (kunci_vector.get(13).equals(temp[i])) {
                    index = 13;
                } else if (kunci_vector.get(14).equals(temp[i])) {
                    index = 14;
                } else if (kunci_vector.get(15).equals(temp[i])) {
                    index = 15;
                } else if (kunci_vector.get(16).equals(temp[i])) {
                    index = 16;
                } else if (kunci_vector.get(17).equals(temp[i])) {
                    index = 17;
                } else if (kunci_vector.get(18).equals(temp[i])) {
                    index = 18;
                } else if (kunci_vector.get(19).equals(temp[i])) {
                    index = 19;
                } else if (kunci_vector.get(20).equals(temp[i])) {
                    index = 20;
                } else if (kunci_vector.get(21).equals(temp[i])) {
                    index = 21;
                } else if (kunci_vector.get(22).equals(temp[i])) {
                    index = 22;
                } else if (kunci_vector.get(23).equals(temp[i])) {
                    index = 23;
                } else if (kunci_vector.get(24).equals(temp[i])) {
                    index = 24;
                } else if (kunci_vector.get(25).equals(temp[i])) {
                    index = 25;
                }

                plaintext2 = plaintext2 + tabel_model.get(index);
            }
        }
        
        fieldPlaintextDekripsi.setText(plaintext2.toUpperCase());
        
    }//GEN-LAST:event_btnProses2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String chiper = fieldChipertextDekripsi.getText();
        StringSelection stringSelection = new StringSelection(chiper);
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(stringSelection, null);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        int pilih = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin keluar ?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (pilih == JOptionPane.YES_OPTION) {
            FrameMenuPoly frameMenuPoly = new FrameMenuPoly();
            frameMenuPoly.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePoly2Kunci.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePoly2Kunci.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePoly2Kunci.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePoly2Kunci.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FramePoly2Kunci().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProses;
    private javax.swing.JButton btnProses2;
    private javax.swing.JTextArea fieldChipertext;
    private javax.swing.JTextField fieldChipertextDekripsi;
    private javax.swing.JTextField fieldKunci;
    private javax.swing.JTextField fieldKunci2;
    private javax.swing.JTextField fieldKunci2Dekripsi;
    private javax.swing.JTextField fieldKunciDekripsi;
    private javax.swing.JTextField fieldPlaintext;
    private javax.swing.JTextArea fieldPlaintextDekripsi;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
